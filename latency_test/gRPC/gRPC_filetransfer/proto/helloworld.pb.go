// Code generated by protoc-gen-go. DO NOT EDIT.
// source: helloworld.proto

package filetransfer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ExecutionTime        string   `protobuf:"bytes,2,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_helloworld_cbe27a4d5a657a01, []int{0}
}
func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (dst *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(dst, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Chunk) GetExecutionTime() string {
	if m != nil {
		return m.ExecutionTime
	}
	return ""
}

type HelloRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_helloworld_cbe27a4d5a657a01, []int{1}
}
func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (dst *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(dst, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Chunk)(nil), "filetransfer.Chunk")
	proto.RegisterType((*HelloRequest)(nil), "filetransfer.HelloRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferClient interface {
	Upload(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Transfer_UploadClient, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Upload(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Transfer_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transfer_serviceDesc.Streams[0], "/filetransfer.transfer/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &transferUploadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transfer_UploadClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type transferUploadClient struct {
	grpc.ClientStream
}

func (x *transferUploadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransferServer is the server API for Transfer service.
type TransferServer interface {
	Upload(*HelloRequest, Transfer_UploadServer) error
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransferServer).Upload(m, &transferUploadServer{stream})
}

type Transfer_UploadServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type transferUploadServer struct {
	grpc.ServerStream
}

func (x *transferUploadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.transfer",
	HandlerType: (*TransferServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Transfer_Upload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor_helloworld_cbe27a4d5a657a01) }

var fileDescriptor_helloworld_cbe27a4d5a657a01 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xc1, 0x0b, 0x82, 0x30,
	0x14, 0xc6, 0x5b, 0x90, 0xe5, 0xb0, 0x88, 0x75, 0x11, 0x4f, 0x22, 0x04, 0x9e, 0x24, 0xea, 0xdc,
	0xa9, 0x8b, 0x5d, 0x47, 0x9d, 0xc3, 0xf4, 0x99, 0xa3, 0xb9, 0xd9, 0xf6, 0xa4, 0xfe, 0xfc, 0x50,
	0x30, 0xec, 0xf8, 0xbd, 0x07, 0xbf, 0xef, 0xf7, 0xd1, 0x75, 0x05, 0x52, 0xea, 0xb7, 0x36, 0xb2,
	0x48, 0x1a, 0xa3, 0x51, 0x33, 0xaf, 0x14, 0x12, 0xd0, 0x64, 0xca, 0x96, 0x60, 0xa2, 0x94, 0xce,
	0x4e, 0x55, 0xab, 0x9e, 0xcc, 0xa7, 0xf3, 0x5c, 0x2b, 0x04, 0x85, 0x3e, 0x09, 0x49, 0xec, 0xf1,
	0x21, 0xb2, 0x2d, 0x5d, 0xc1, 0x07, 0xf2, 0x16, 0x85, 0x56, 0x37, 0x14, 0x35, 0xf8, 0xd3, 0x90,
	0xc4, 0x2e, 0x5f, 0xfe, 0xae, 0x17, 0x51, 0x43, 0x14, 0x53, 0x2f, 0xed, 0xba, 0x38, 0xbc, 0x5a,
	0xb0, 0xd8, 0x01, 0x6b, 0xb0, 0x36, 0x7b, 0x40, 0x0f, 0x74, 0xf9, 0x10, 0xf7, 0x67, 0xba, 0x18,
	0xfa, 0xd9, 0x91, 0x3a, 0xd7, 0x46, 0xea, 0xac, 0x60, 0x41, 0x32, 0x16, 0x4b, 0xc6, 0xac, 0x60,
	0xf3, 0xff, 0xeb, 0x8d, 0xa3, 0xc9, 0x8e, 0xdc, 0x9d, 0x7e, 0xd3, 0xe1, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x75, 0x29, 0xc6, 0xd3, 0xe7, 0x00, 0x00, 0x00,
}
